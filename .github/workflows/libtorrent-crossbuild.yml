name: libtorrent crossbuild package release

on:
  workflow_dispatch:
    inputs:
      skip_rerun:
        description: "Skip rerun?"
        required: true
        type: boolean
      retries:
        description: 'Number of rerun retries'
        required: true
        default: '5'
        type: choice
        options: [ "1", "2", "3", "4", "5", "6", "7", "8", "9" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      libtorrent_version: ${{ steps.version_info.outputs.libtorrent_version }}
    strategy:
      fail-fast: false
      matrix:
        name: [libtorrent]
        os_id: [debian, ubuntu]
        os_codename: [stretch, buster, bullseye, bionic, focal, jammy]
        arch: [amd64, armhf, arm64]
        exclude:
          - os_id: debian
            os_codename: bionic
          - os_id: debian
            os_codename: focal
          - os_id: debian
            os_codename: jammy
          - os_id: ubuntu
            os_codename: stretch
          - os_id: ubuntu
            os_codename: buster
          - os_id: ubuntu
            os_codename: bullseye

    name: ${{ matrix.os_id }}:${{ matrix.os_codename }} ${{ matrix.name }} ${{ matrix.arch }}

    env:
      opt_dir_name: "opt/local"
      github_branch: "RC_2_0"
      cxx_standard: "17"
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    steps:
      - name: Host - Checkout action
        uses: actions/checkout@v3

      # Fix this bug https://github.com/actions/runner-images/issues/7192
      - name: Host - phased updates
        run: echo 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      # Bootstrap Ubuntu Lunar repo so that we can install specific app we may need, like binfmt and qemu-user-static
      - name: Host - set up lunar repo -t lunar
        run: |
          printf '%b\n' 'Package: *\nPin: release n=lunar\nPin-Priority: 50' | sudo tee /etc/apt/preferences
          printf '%b\n' 'deb http://archive.ubuntu.com/ubuntu/ lunar main universe restricted' | sudo tee /etc/apt/sources.list.d/lunar.list

      - name: Host - update
        run: sudo apt-get update

      # - name: Host - upgrade
      #   run: sudo apt-get -y upgrade

      # No action or other method to bootstrap binfmt. Install from lunar and we get the latest versions and full docker support
      - name: Host - set up qemu-user-static binfmt-support from lunar
        run: sudo apt install -t lunar libpipeline1 qemu-user-static binfmt-support

      # Why are we doing it like this and not using a container setup? That's how you're supposed to do it, right?
      # qemu-user-static and binfmt-support are not part of the runner images https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
      # We would need to modify the runner to install these before the container starts. Which you cannot do as there is no way to bootstrap the host.
      # So we install them on the host then create/pull a custom docker image that we use to build the multiarch targets.
      # We are always on the host runner but can use any docker image we need with the access the qemu emulation when required.
      #
      # We are using these pre configured toolchain images that allows me to remove 50% of the code/time from this action.
      #
      # https://github.com/userdocs/dcb/blob/main/Dockerfile
      #
      # The image does not run as root and has password-less sudo. There are two users username:1000 /home/username and github:1001 /home/github
      # In the action it runs as 1001 /home/github and files should be available to the host. For local use, you might need -u 1000

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d -u 1001 -v ${{ github.workspace }}:/home/github ghcr.io/userdocs/dcb:${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.arch }}

      - name: Docker - cmake and ninja download and install
        run: |
          docker exec multiarch curl -sNL "https://github.com/userdocs/cmake-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_codename }}-cmake-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_codename }}-cmake-${{ matrix.arch }}.deb
          docker exec multiarch sudo dpkg -i ${{ matrix.os_id }}-${{ matrix.os_codename }}-cmake-${{ matrix.arch }}.deb

      - name: Docker - zlib-ng download and install
        run: |
          docker exec multiarch curl -sNL "https://github.com/userdocs/zlib-ng-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb
          docker exec multiarch sudo dpkg -i ${{ matrix.os_id }}-${{ matrix.os_codename }}-zlib-ng-${{ matrix.arch }}.deb

      - name: Docker - openssl download and install
        run: |
          docker exec multiarch curl -sNL "https://github.com/userdocs/openssl-crossbuild/releases/latest/download/${{ matrix.os_id }}-${{ matrix.os_codename }}-openssl-${{ matrix.arch }}.deb" -o ${{ matrix.os_id }}-${{ matrix.os_codename }}-openssl-${{ matrix.arch }}.deb
          docker exec multiarch sudo dpkg -i ${{ matrix.os_id }}-${{ matrix.os_codename }}-openssl-${{ matrix.arch }}.deb

      - name: Docker - Bootstrap the boost files
        run: |
          boost_version="$(git ls-remote -q -t --refs https://github.com/boostorg/boost.git | awk '{sub("refs/tags/boost-", "");sub("(.*)(rc|alpha|beta)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          curl -sNLk https://boostorg.jfrog.io/artifactory/main/release/${boost_version}/source/boost_${boost_version//./_}.tar.gz -o "boost.tar.gz"
          tar xf "boost.tar.gz"
          echo "boost_version=${boost_version//./_}" >> $GITHUB_ENV

      - name: Git clone libtorrent
        run: git clone --single-branch --branch "${{ env.github_branch }}" --shallow-submodules --recurse-submodules --depth 1 https://github.com/arvidn/libtorrent.git libtorrent

      - name: Docker - libtorrent - cmake configure
        run: |
          docker exec -w /home/github/libtorrent multiarch cmake -Wno-dev -Wno-deprecated -G Ninja -B build \
          -D CMAKE_BUILD_TYPE="Release" \
          -D CMAKE_CXX_STANDARD="${{ env.cxx_standard }}" \
          -D CMAKE_CXX_STANDARD_REQUIRED=ON \
          -D CMAKE_CXX_EXTENSIONS=OFF \
          -D BOOST_INCLUDEDIR="/home/github/boost_${{ env.boost_version }}/" \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: Docker - libtorrent - cmake build
        run: docker exec -w /home/github/libtorrent multiarch cmake --build build

      - name: Docker - libtorrent - cmake install
        run: docker exec -w /home/github/libtorrent multiarch cmake --install build

      - name: Set full libtorrent version to variable using strings
        run: echo "libtorrent_version=$(strings -d build/${{ env.opt_dir_name }}/lib/libtorrent-rasterbar.so | sed -rn 's|^libtorrent/(.*)|\1|p' | head -n 1)" >> $GITHUB_ENV

      - name: Host - Set deb dependencies for libtorrent
        run: echo "libtorrent-deb-deps=zlib-ng,openssl" >> $GITHUB_ENV

      - name: Docker - ldconfig - create /etc/ld.so.conf.d/libtorrent.conf
        run: |
          docker exec -w /home/github/build multiarch mkdir -p etc/ld.so.conf.d
          docker exec -w /home/github/build/etc/ld.so.conf.d multiarch bash -c "echo '/${{ env.opt_dir_name }}/lib' > libtorrent.conf"

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          compress_type: gzip
          version: "${{ env.libtorrent_version }}"
          depends: "${{ env.libtorrent-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_codename }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.libtorrent_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Info
        id: version_info
        run: |          
          echo "libtorrent_version=${{ env.libtorrent_version }}" >> $GITHUB_OUTPUT

      - name: Host - upload deb packages
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}-deb"
          path: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

  release:
    name: Upload artifacts to release
    runs-on: ubuntu-latest
    needs: build
    if: always() && contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      libtorrent_version: ${{ needs.build.outputs.libtorrent_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Host - Download artifacts
        uses: actions/download-artifact@v3

      - name: Host - artifacts organise for release
        run: |
          mkdir -p "releases"
          for files in *-deb; do
              cp -rf ${files}/* "releases/"
          done

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: releases/*.deb
          replacesArtifacts: true
          tag: "${{ env.libtorrent_version }}"
          name: "libtorrent ${{ env.libtorrent_version }}"
          body: "libtorrent built from github master on amd64 arm64 armhf for Debian Stretch Buster Bullseye and Ubuntu bionic Focal"
          allowUpdates: true

  rerun-on-failure:
    if: failure() && inputs.skip_rerun == '0'
    name: rerun-on-failure
    needs: release
    permissions:
      actions: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    steps:
      - uses: actions/checkout@v3
      - name: Trigger rerun workflow on job failures
        run: gh workflow run rerun.yml -f run_id=${{ github.run_id }} -f attempts=${{ github.run_attempt }} -f retries=${{ inputs.retries }}

